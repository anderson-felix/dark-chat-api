name: GitHub Actions Demo
on:
  push:
    branches:
      - main

jobs:
  Setup:
    runs-on: ubuntu-latest
    steps:
      - name: Get source code
        uses: actions/checkout@v2

      - name: Copy scripts to remote server
        uses: ./.github/actions/rsync
        with:
          user: ${{ secrets.SSH_USER }}
          host: ${{ secrets.SSH_HOST }}
          key: ${{ secrets.SSH_KEY }}
          source: production/scripts
          destination: '~/app/production'

      - name: Install docker and docker-compose
        uses: ./.github/actions/ssh
        with:
          user: ${{ secrets.SSH_USER }}
          host: ${{ secrets.SSH_HOST }}
          key: ${{ secrets.SSH_KEY }}
          commands: |
            cd ~/app/production/scripts

            ./install-docker.sh
            ./install-docker-compose.sh

            if ! which docker; then
              echo true > .should_reboot
              echo "Reboot the system to complete the docker installation."
            fi

        - name: Copy .install_docker file from remote server
          uses: ./.github/actions/rsync
          with:
            user: ${{ secrets.SSH_USER }}
            host: ${{ secrets.SSH_HOST }}
            key: ${{ secrets.SSH_KEY }}
            source: ~/app/production/scripts/.should_reboot
            destination: ./app/scripts/
            copy_from: true

        - name: Check if reboot is needed
          shell: bash
          run: |
            if [[ $(cat production/scripts/.should_reboot) == "true" ]]; then
              echo "SHOULD_REBOOT=true" >> $GITHUB_ENV
            fi

        - name: Reboot the server if necessary
          if: env.SHOULD_REBOOT == 'true'
          uses: ./.github/actions/ssh
          with:
            user: ${{ secrets.SSH_USER }}
            host: ${{ secrets.SSH_HOST }}
            key: ${{ secrets.SSH_KEY }}
            commands: sudo reboot

        - name: Wait server reboot if necessary
          if: env.SHOULD_REBOOT == 'true'
          shell: bash
          run: sleep 60s


  Deploy:
    runs-on: ubuntu-latest
    needs: Setup
    environment: production
    steps:
      - name: Get source code
        uses: actions/checkout@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Make new image tag
        shell: bash
        run: echo "NEW_IMAGE_TAG=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: production/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/chat-backend:latest
            ${{ secrets.DOCKER_HUB_USERNAME }}/chat-backend:${{ env.NEW_IMAGE_TAG }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/chat-backend:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/chat-backend:buildcache,mode=max

      - name: Create nginx config files
        env:
          SERVER_NAME: ${{ SSL_CERTIFICATE_ADDRESS }}
        shell: bash
        run: |
          cd production/nginx/conf.d

          # make sure envsubst don't replace these nginx variables
          export uri='$uri'
          export host='$host'

          envsubst < http.conf.template > http.conf
          envsubst < https.conf.template > https.conf.disabled
          rm http.conf.template https.conf.template

      - name: Create config files
        env:
          APP_SECRET: ${{ secrets.APP_SECRET }}
          APP_API_URL: ${{ secrets.APP_API_URL }}

        shell: bash
        run: |
          cd production
          envsubst < .env.template > .env
          rm .env.template

      - name: Copy scripts to remote server
        uses: ./.github/actions/rsync
        with:
          user: ${{ secrets.SSH_USER }}
          host: ${{ secrets.SSH_HOST }}
          key: ${{ secrets.SSH_KEY }}
          source: production
          destination: ~/app/

      - name: Setup remote container
        uses: ./.github/actions/ssh
        with:
          user: ${{ secrets.SSH_USER }}
          host: ${{ secrets.SSH_HOST }}
          key: ${{ secrets.SSH_KEY }}
          commands: |
            cd app/production

            # update the containers
            docker-compose down
            docker pull ${{ secrets.DOCKERHUB_USER }}/chat-backend:latest
            docker-compose up -d

            # install ssl certificate if necessary
            scripts/install-ssl-certificate.sh ${{ secrets.SSL_CERTIFICATE_ADDRESS }} ${{ secrets.SSL_CERTIFICATE_EMAIL }}

            # remove all unused images
            docker image prune -af
